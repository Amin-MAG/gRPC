// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MajorityClient is the client API for Majority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MajorityClient interface {
	CalculateListMajority(ctx context.Context, in *ListMajorityRequest, opts ...grpc.CallOption) (*ListMajorityReply, error)
}

type majorityClient struct {
	cc grpc.ClientConnInterface
}

func NewMajorityClient(cc grpc.ClientConnInterface) MajorityClient {
	return &majorityClient{cc}
}

func (c *majorityClient) CalculateListMajority(ctx context.Context, in *ListMajorityRequest, opts ...grpc.CallOption) (*ListMajorityReply, error) {
	out := new(ListMajorityReply)
	err := c.cc.Invoke(ctx, "/bale_interview.Majority/CalculateListMajority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MajorityServer is the server API for Majority service.
// All implementations must embed UnimplementedMajorityServer
// for forward compatibility
type MajorityServer interface {
	CalculateListMajority(context.Context, *ListMajorityRequest) (*ListMajorityReply, error)
	mustEmbedUnimplementedMajorityServer()
}

// UnimplementedMajorityServer must be embedded to have forward compatible implementations.
type UnimplementedMajorityServer struct {
}

func (UnimplementedMajorityServer) CalculateListMajority(context.Context, *ListMajorityRequest) (*ListMajorityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateListMajority not implemented")
}
func (UnimplementedMajorityServer) mustEmbedUnimplementedMajorityServer() {}

// UnsafeMajorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MajorityServer will
// result in compilation errors.
type UnsafeMajorityServer interface {
	mustEmbedUnimplementedMajorityServer()
}

func RegisterMajorityServer(s grpc.ServiceRegistrar, srv MajorityServer) {
	s.RegisterService(&Majority_ServiceDesc, srv)
}

func _Majority_CalculateListMajority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMajorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorityServer).CalculateListMajority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bale_interview.Majority/CalculateListMajority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorityServer).CalculateListMajority(ctx, req.(*ListMajorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Majority_ServiceDesc is the grpc.ServiceDesc for Majority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Majority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bale_interview.Majority",
	HandlerType: (*MajorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateListMajority",
			Handler:    _Majority_CalculateListMajority_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/majority.proto",
}
