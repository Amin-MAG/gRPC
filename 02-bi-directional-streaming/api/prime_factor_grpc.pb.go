// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactorsClient is the client API for Factors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorsClient interface {
	// The stream keyword is specified before both the request type and response
	// type to make it as bidirectional streaming RPC method.
	CalculatePrimeFactors(ctx context.Context, opts ...grpc.CallOption) (Factors_CalculatePrimeFactorsClient, error)
}

type factorsClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorsClient(cc grpc.ClientConnInterface) FactorsClient {
	return &factorsClient{cc}
}

func (c *factorsClient) CalculatePrimeFactors(ctx context.Context, opts ...grpc.CallOption) (Factors_CalculatePrimeFactorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Factors_ServiceDesc.Streams[0], "/prime.Factors/CalculatePrimeFactors", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorsCalculatePrimeFactorsClient{stream}
	return x, nil
}

type Factors_CalculatePrimeFactorsClient interface {
	Send(*CalculatePrimeFactorsRequest) error
	Recv() (*CalculatePrimeFactorsResponse, error)
	grpc.ClientStream
}

type factorsCalculatePrimeFactorsClient struct {
	grpc.ClientStream
}

func (x *factorsCalculatePrimeFactorsClient) Send(m *CalculatePrimeFactorsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *factorsCalculatePrimeFactorsClient) Recv() (*CalculatePrimeFactorsResponse, error) {
	m := new(CalculatePrimeFactorsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FactorsServer is the server API for Factors service.
// All implementations must embed UnimplementedFactorsServer
// for forward compatibility
type FactorsServer interface {
	// The stream keyword is specified before both the request type and response
	// type to make it as bidirectional streaming RPC method.
	CalculatePrimeFactors(Factors_CalculatePrimeFactorsServer) error
	mustEmbedUnimplementedFactorsServer()
}

// UnimplementedFactorsServer must be embedded to have forward compatible implementations.
type UnimplementedFactorsServer struct {
}

func (UnimplementedFactorsServer) CalculatePrimeFactors(Factors_CalculatePrimeFactorsServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculatePrimeFactors not implemented")
}
func (UnimplementedFactorsServer) mustEmbedUnimplementedFactorsServer() {}

// UnsafeFactorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorsServer will
// result in compilation errors.
type UnsafeFactorsServer interface {
	mustEmbedUnimplementedFactorsServer()
}

func RegisterFactorsServer(s grpc.ServiceRegistrar, srv FactorsServer) {
	s.RegisterService(&Factors_ServiceDesc, srv)
}

func _Factors_CalculatePrimeFactors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FactorsServer).CalculatePrimeFactors(&factorsCalculatePrimeFactorsServer{stream})
}

type Factors_CalculatePrimeFactorsServer interface {
	Send(*CalculatePrimeFactorsResponse) error
	Recv() (*CalculatePrimeFactorsRequest, error)
	grpc.ServerStream
}

type factorsCalculatePrimeFactorsServer struct {
	grpc.ServerStream
}

func (x *factorsCalculatePrimeFactorsServer) Send(m *CalculatePrimeFactorsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *factorsCalculatePrimeFactorsServer) Recv() (*CalculatePrimeFactorsRequest, error) {
	m := new(CalculatePrimeFactorsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Factors_ServiceDesc is the grpc.ServiceDesc for Factors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Factors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prime.Factors",
	HandlerType: (*FactorsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculatePrimeFactors",
			Handler:       _Factors_CalculatePrimeFactors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/prime_factor.proto",
}
